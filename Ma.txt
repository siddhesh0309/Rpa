import os
import time
from datetime import datetime, timedelta
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

# Set up Chrome WebDriver
chrome_driver_path = "path/to/chromedriver"  # Update with actual path
download_path = "C:/Users/YourUsername/Downloads"  # Update with your downloads folder

options = webdriver.ChromeOptions()
prefs = {"download.default_directory": download_path}
options.add_experimental_option("prefs", prefs)

service = Service(chrome_driver_path)
driver = webdriver.Chrome(service=service, options=options)

# Open the website
website_url = "https://example.com"  # Replace with actual URL
driver.get(website_url)

# Wait for page elements
wait = WebDriverWait(driver, 20)

# Function to download and rename the report for a given date range
def download_report(from_date, to_date):
    formatted_from_date = from_date.strftime("%d %b %Y")  # e.g., "01 Dec 2023"
    formatted_to_date = to_date.strftime("%d %b %Y")  # e.g., "10 Feb 2024"

    # Click on 'Reports'
    reports_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(),'Reports')]")))
    reports_button.click()

    # Click on 'Transactions'
    transactions_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(),'Transactions')]")))
    transactions_button.click()

    # Select 'From Date' field and enter date
    from_date_field = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@id='fromDate']")))  # Adjust ID/XPath
    from_date_field.clear()
    from_date_field.send_keys(from_date.strftime("%Y-%m-%d"))
    from_date_field.send_keys(Keys.RETURN)

    # Select 'To Date' field and enter date
    to_date_field = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@id='toDate']")))  # Adjust ID/XPath
    to_date_field.clear()
    to_date_field.send_keys(to_date.strftime("%Y-%m-%d"))
    to_date_field.send_keys(Keys.RETURN)

    # Click Download Report button
    download_button = wait.until(EC.element_to_be_clickable((By.XPATH, "//button[contains(text(),'Download')]")))  # Adjust XPath
    download_button.click()

    # Wait for the download to complete
    timeout = 60  # Max wait time (seconds)
    start_time = time.time()

    while True:
        time.sleep(2)  # Check every 2 seconds
        files = os.listdir(download_path)
        downloaded_file = None

        for file in files:
            if file.endswith(".csv") or file.endswith(".xlsx"):  # Adjust for file type
                downloaded_file = os.path.join(download_path, file)
                break

        if downloaded_file and not file.endswith(".crdownload"):  # Ensure file is fully downloaded
            break

        if time.time() - start_time > timeout:
            print("Download timed out!")
            driver.quit()
            exit()

    # Rename the downloaded file
    file_extension = os.path.splitext(downloaded_file)[1]  # Get file extension (.csv or .xlsx)
    new_filename = f"{formatted_from_date} - {formatted_to_date}{file_extension}"
    new_filepath = os.path.join(download_path, new_filename)
    os.rename(downloaded_file, new_filepath)

    print(f"File downloaded and renamed to: {new_filename}")


# **First Download:** Last 2 months â†’ Today
today = datetime.today()
from_date = (today.replace(day=1) - timedelta(days=1)).replace(day=1)  # First day of two months ago
to_date = today  # Current date

download_report(from_date, to_date)

# **Second Download:** Previous month (Full Month)
last_month_end = from_date - timedelta(days=1)  # Last day of previous month
last_month_start = last_month_end.replace(day=1)  # First day of previous month

download_report(last_month_start, last_month_end)

# Close the browser after both downloads
driver.quit()
